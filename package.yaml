layouts:
  # path只表示handler.go的模板，具体的handler路径由默认路径和handler_dir决定
  - path: handler.go
    delims:
      - '{{'
      - '}}'
    body: |-
      // this is my custom handler.

      package {{.PackageName}}

      import (
      	"context"
        "{{.ProjPackage}}/biz/service"
      	"github.com/cloudwego/hertz/pkg/app"

      {{- range $k, $v := .Imports}}
      	{{$k}} "{{$v.Package}}"
      {{- end}}
      )

      {{range $_, $MethodInfo := .Methods}}
      {{$MethodInfo.Comment}}
      func {{$MethodInfo.Name}}(ctx context.Context, c *app.RequestContext) {
        //  you can code something
      	var err error
      	{{if ne $MethodInfo.RequestTypeName "" -}}
      	var req {{$MethodInfo.RequestTypeName}}
      	err = c.BindAndValidate(&req)
      	if err != nil {
      		c.String(400, err.Error())
      		return
      	}
      	{{end}}
        resp := service.New{{$MethodInfo.Name}}Service(ctx, c).Run(&req)
      	c.{{.Serializer}}(200, resp)
      }
      {{end}}
  # path只表示router.go的模板，其路径固定在：biz/router/namespace/
  - path: router.go
    delims:
      - '{{'
      - '}}'
    body: |-
      // Code generated by hertz generator. DO NOT EDIT.

      package {{$.PackageName}}

      import (
      	"github.com/cloudwego/hertz/pkg/app/server"

      	{{range $k, $v := .HandlerPackages}}{{$k}} "{{$v}}"{{end}}
      )

      /*
       This file will register all the routes of the services in the master idl.
       And it will update automatically when you use the "update" command for the idl.
       So don't modify the contents of the file, or your code will be deleted when it is updated.
       */

      {{define "g"}}
      {{- if eq .Path "/"}}r
      {{- else}}{{.GroupName}}{{end}}
      {{- end}}

      {{define "G"}}
      {{- if ne .Handler ""}}
      	{{- .GroupName}}.{{.HttpMethod}}("{{.Path}}", append({{.MiddleWare}}Mw(), {{.Handler}})...)
      {{- end}}
      {{- if ne (len .Children) 0}}
      {{.MiddleWare}} := {{template "g" .}}.Group("{{.Path}}", {{.MiddleWare}}Mw()...)
      {{- end}}
      {{- range $_, $router := .Children}}
      {{- if ne .Handler ""}}
      	{{template "G" $router}}
      {{- else}}
      	{	{{template "G" $router}}
      	}
      {{- end}}
      {{- end}}
      {{- end}}

      // Register register routes based on the IDL 'api.${HTTP Method}' annotation.
      func Register(r *server.Hertz) {
      {{template "G" .Router}}
      }
  # path只表示register.go的模板，register的路径固定为biz/router/register.go
  - path: register.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator. DO NOT EDIT.

      package router

      import (
      	"github.com/cloudwego/hertz/pkg/app/server"
      	{{$.PkgAlias}} "{{$.Pkg}}"
      )

      // GeneratedRegister registers routers generated by IDL.
      func GeneratedRegister(r *server.Hertz){
      	//INSERT_POINT: DO NOT DELETE THIS LINE!
      	{{$.PkgAlias}}.Register(r)
      }
  - path: model.go
    delims:
      - ""
      - ""
    body: ""
  # path只表示middleware.go的模板，middleware的路径和router.go一样为：biz/router/namespace/
  - path: middleware.go
    delims:
      - '{{'
      - '}}'
    body: |-
      // Code generated by hertz generator.

      package {{$.PackageName}}

      import (
      	"github.com/cloudwego/hertz/pkg/app"
      )

      {{define "M"}}
      func {{.MiddleWare}}Mw() []app.HandlerFunc {
      	// your code...
      	return nil
      }
      {{range $_, $router := $.Children}}{{template "M" $router}}{{end}}
      {{- end}}

      {{template "M" .Router}}
  # path只表示client.go的模板，client代码的生成路径由用户指定"${client_dir}"
  - path: client.go
    delims:
      - '{{'
      - '}}'
    body: |-
      // Code generated by hertz generator.

      package {{$.PackageName}}

      import (
          "github.com/cloudwego/hertz/pkg/app/client"
      	"github.com/cloudwego/hertz/pkg/common/config"
      )

      type {{.ServiceName}}Client struct {
      	client * client.Client
      }

      func New{{.ServiceName}}Client(opt ...config.ClientOption) (*{{.ServiceName}}Client, error) {
      	c, err := client.NewClient(opt...)
      	if err != nil {
      		return nil, err
      	}

      	return &{{.ServiceName}}Client{
      		client: c,
      	}, nil
      }
  # handler_single表示单独的handler模板，用于update的时候更新每一个新增的handler
  - path: handler_single.go
    delims:
      - '{{'
      - '}}'
    body: |+
      {{.Comment}}
      func {{.Name}}(ctx context.Context, c *app.RequestContext) {
      // this my demo
      	var err error
      	{{if ne .RequestTypeName "" -}}
      	var req {{.RequestTypeName}}
      	err = c.BindAndValidate(&req)
      	if err != nil {
      		c.String(400, err.Error())
      		return
      	}
      	{{end}}
      	resp := new({{.ReturnTypeName}})

      	c.{{.Serializer}}(200, resp)
      }
  # middleware_single表示单独的middleware模板，用于update的时候更新每一个新增的middleware_single
  - path: middleware_single.go
    delims:
      - '{{'
      - '}}'
    body: |+
      func {{.MiddleWare}}Mw() []app.HandlerFunc {
      	// your code...
      	return nil
      }


  # 生层 service 代码
  - path: biz/service/{{.Method}}.go
    custom_template: true
    divide_method: true
    delims:
      - '{{'
      - '}}'
    body: |-
      package {{.PackageName}}

      import (
      	"context"
      	"github.com/cloudwego/hertz/pkg/app"

      {{- range $k, $v := .Imports}}
      	{{$k}} "{{$v.Package}}"
      {{- end}}
      )

      {{range $_, $MethodInfo := .Methods}}
      type {{$MethodInfo.Name}}Service struct {
          RequestContext  *app.RequestContext
          Context         context.Context
      }

      func New{{$MethodInfo.Name}}Service(Context context.Context, RequestContext *app.RequestContext) *{{$MethodInfo.Name}}Service {
      	return &{{$MethodInfo.Name}}Service{RequestContext: RequestContext, Context: Context}
      }

      func (h *{{$MethodInfo.Name}}Service) Run(req *{{$MethodInfo.RequestTypeName}}) ( resp *{{$MethodInfo.ReturnTypeName}}) {
        //defer func() {
        //	hlog.CtxInfof(h.Context, "req = %+v", req)
        //	hlog.CtxInfof(h.Context, "resp = %+v", resp)
        //}()

        // todo edit your code
      	return
      }
      {{end}}

  # 生层 service 的单测代码
  - path: biz/service/{{.Method}}_test.go
    custom_template: true
    divide_method: true
    delims:
      - '{{'
      - '}}'
    body: |-
      package {{.PackageName}}

      import (
        "context"
        "testing"
        "github.com/cloudwego/hertz/pkg/app"
        "github.com/cloudwego/hertz/pkg/common/test/assert"

      {{- range $k, $v := .Imports}}
      	{{$k}} "{{$v.Package}}"
      {{- end}}
      )

      {{range $_, $MethodInfo := .Methods}}
      func Test{{$MethodInfo.Name}}Service_Run(t *testing.T) {
        ctx := context.Background()
        c := app.NewContext(1)
        s := New{{$MethodInfo.Name}}Service(ctx, c)
        // init req and assert value
        req := &{{$MethodInfo.RequestTypeName}}{}
        resp := s.Run(req)
        assert.DeepEqual(t, nil, resp)
        // todo edit your unit test.
      }
      {{end}}


  # 生层 handler 的单测代码
  - path: biz/handler/{{.PackagePath}}/{{.ServiceName}}_test.go
    custom_template: true
    divide_method: false
    delims:
      - '{{'
      - '}}'
    body: |-
      package {{.PackageName}}

      import (
       "bytes"
       "github.com/cloudwego/hertz/pkg/app/server"
       "github.com/cloudwego/hertz/pkg/common/test/assert"
       "github.com/cloudwego/hertz/pkg/common/ut"
       "testing"
      )

      {{range $_, $MethodInfo := .Methods}}
        func Test{{$MethodInfo.Name}}(t *testing.T) {
        h := server.Default()
        h.GET("{{$MethodInfo.Path}}", {{$MethodInfo.Name}})
        w := ut.PerformRequest(h.Engine, "{{$MethodInfo.HTTPMethod}}", "{{$MethodInfo.Path}}", &ut.Body{Body: bytes.NewBufferString(""), Len: 1},
        ut.Header{})
        resp := w.Result()
        assert.DeepEqual(t, 201, resp.StatusCode())
        assert.DeepEqual(t, "", string(resp.Body()))
        // todo edit your unit test.
      }
      {{end}}
