// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/li-jin-gou/hz_demo/biz/dal/model"
)

func newNote(db *gorm.DB, opts ...gen.DOOption) note {
	_note := note{}

	_note.noteDo.UseDB(db, opts...)
	_note.noteDo.UseModel(&model.Note{})

	tableName := _note.noteDo.TableName()
	_note.ALL = field.NewAsterisk(tableName)
	_note.ID = field.NewInt64(tableName, "id")
	_note.CreatedAt = field.NewTime(tableName, "created_at")
	_note.UpdatedAt = field.NewTime(tableName, "updated_at")
	_note.DeletedAt = field.NewField(tableName, "deleted_at")
	_note.UserID = field.NewInt64(tableName, "user_id")
	_note.Title = field.NewString(tableName, "title")
	_note.Content = field.NewString(tableName, "content")

	_note.fillFieldMap()

	return _note
}

type note struct {
	noteDo noteDo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	UserID    field.Int64
	Title     field.String
	Content   field.String

	fieldMap map[string]field.Expr
}

func (n note) Table(newTableName string) *note {
	n.noteDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n note) As(alias string) *note {
	n.noteDo.DO = *(n.noteDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *note) updateTableName(table string) *note {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewInt64(table, "id")
	n.CreatedAt = field.NewTime(table, "created_at")
	n.UpdatedAt = field.NewTime(table, "updated_at")
	n.DeletedAt = field.NewField(table, "deleted_at")
	n.UserID = field.NewInt64(table, "user_id")
	n.Title = field.NewString(table, "title")
	n.Content = field.NewString(table, "content")

	n.fillFieldMap()

	return n
}

func (n *note) WithContext(ctx context.Context) *noteDo { return n.noteDo.WithContext(ctx) }

func (n note) TableName() string { return n.noteDo.TableName() }

func (n note) Alias() string { return n.noteDo.Alias() }

func (n *note) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *note) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 7)
	n.fieldMap["id"] = n.ID
	n.fieldMap["created_at"] = n.CreatedAt
	n.fieldMap["updated_at"] = n.UpdatedAt
	n.fieldMap["deleted_at"] = n.DeletedAt
	n.fieldMap["user_id"] = n.UserID
	n.fieldMap["title"] = n.Title
	n.fieldMap["content"] = n.Content
}

func (n note) clone(db *gorm.DB) note {
	n.noteDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n note) replaceDB(db *gorm.DB) note {
	n.noteDo.ReplaceDB(db)
	return n
}

type noteDo struct{ gen.DO }

func (n noteDo) Debug() *noteDo {
	return n.withDO(n.DO.Debug())
}

func (n noteDo) WithContext(ctx context.Context) *noteDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n noteDo) ReadDB() *noteDo {
	return n.Clauses(dbresolver.Read)
}

func (n noteDo) WriteDB() *noteDo {
	return n.Clauses(dbresolver.Write)
}

func (n noteDo) Session(config *gorm.Session) *noteDo {
	return n.withDO(n.DO.Session(config))
}

func (n noteDo) Clauses(conds ...clause.Expression) *noteDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n noteDo) Returning(value interface{}, columns ...string) *noteDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n noteDo) Not(conds ...gen.Condition) *noteDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n noteDo) Or(conds ...gen.Condition) *noteDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n noteDo) Select(conds ...field.Expr) *noteDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n noteDo) Where(conds ...gen.Condition) *noteDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n noteDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *noteDo {
	return n.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (n noteDo) Order(conds ...field.Expr) *noteDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n noteDo) Distinct(cols ...field.Expr) *noteDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n noteDo) Omit(cols ...field.Expr) *noteDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n noteDo) Join(table schema.Tabler, on ...field.Expr) *noteDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n noteDo) LeftJoin(table schema.Tabler, on ...field.Expr) *noteDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n noteDo) RightJoin(table schema.Tabler, on ...field.Expr) *noteDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n noteDo) Group(cols ...field.Expr) *noteDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n noteDo) Having(conds ...gen.Condition) *noteDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n noteDo) Limit(limit int) *noteDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n noteDo) Offset(offset int) *noteDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n noteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *noteDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n noteDo) Unscoped() *noteDo {
	return n.withDO(n.DO.Unscoped())
}

func (n noteDo) Create(values ...*model.Note) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n noteDo) CreateInBatches(values []*model.Note, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n noteDo) Save(values ...*model.Note) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n noteDo) First() (*model.Note, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Note), nil
	}
}

func (n noteDo) Take() (*model.Note, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Note), nil
	}
}

func (n noteDo) Last() (*model.Note, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Note), nil
	}
}

func (n noteDo) Find() ([]*model.Note, error) {
	result, err := n.DO.Find()
	return result.([]*model.Note), err
}

func (n noteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Note, err error) {
	buf := make([]*model.Note, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n noteDo) FindInBatches(result *[]*model.Note, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n noteDo) Attrs(attrs ...field.AssignExpr) *noteDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n noteDo) Assign(attrs ...field.AssignExpr) *noteDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n noteDo) Joins(fields ...field.RelationField) *noteDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n noteDo) Preload(fields ...field.RelationField) *noteDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n noteDo) FirstOrInit() (*model.Note, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Note), nil
	}
}

func (n noteDo) FirstOrCreate() (*model.Note, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Note), nil
	}
}

func (n noteDo) FindByPage(offset int, limit int) (result []*model.Note, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n noteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n noteDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n noteDo) Delete(models ...*model.Note) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *noteDo) withDO(do gen.Dao) *noteDo {
	n.DO = *do.(*gen.DO)
	return n
}
